import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

 
    public static List<Integer> cutTheSticks(List<Integer> arr) {
    
     
     List<Integer> newList = new ArrayList<Integer>();
     
     
     int array[]=new int[arr.size()];
     
     for(int i=0; i<arr.size(); i++)
     {
         array[i]=arr.get(i);
              }
               Arrays.sort(array);
     
     
     newList.add(arr.size());
     
        for (int i = 1; i < array.length; i++) {
            if (array[i] != array[i-1]) {
                newList.add(array.length - i);
            }
        }
        
      return newList;
    }
  
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        List<Integer> result = Result.cutTheSticks(arr);

        bufferedWriter.write(
            result.stream()
                .map(Object::toString)
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
